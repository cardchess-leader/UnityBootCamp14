using UnityEngine;

public class VectorSample : MonoBehaviour
{
    public Vector3 A = new Vector3(); // x, y, z가 모두 0으로 초기화됨(zero vector)
    public Vector3 B = new Vector3(1, 2);
    public Vector3 C = new Vector3(1, 2, 3);
    public Vector2 D = new Vector2(1, 2);
    public Vector3 E, F;
    #region 필기
    // 벡터의 요소: x, y, z, w
    // x: x축 좌표
    // y: y축 좌표
    // z: z축 좌표
    // w: 셰이더나 수학 계산 등에서 사용되는 Vector4에서의 w축

    // 값(value) vs 참조(reference)
    // 값: 변수에 데이터가 직접 저장됩니다.
    // 참조: 변수에 데이터의 메모리 주소가 저장되어, 해당 주소를 통해 데이터를 접근합니다.
    // VectorSample = new VectorSample(); // 클래스는 대표적인 참조 타입입니다.
    // 메모리 저장 영역 / 프로그램 실행 개념
    // 프로그램이 실행되기 위해서는 운영체제(OS)가 메모리에 프로그램을 로드하고, CPU가 해당 메모리 주소를 통해 명령어를 실행합니다.
    // 프로그램이 실행되는 동안 중앙 제어 장치 (CPU)는 메모리에서 명령어를 읽고 실행하며, 이 과정에서 변수와 데이터는 메모리의 특정 위치에 저장됩니다.

    // 컴퓨터 메모리는 바이트 단위로 번호가 매겨진 주소 공간으로 구성되어 있습니다.
    // 낮은 주소부터 높은 주소까지 저장되는 영역이 다르게 설정되어 있습니다.
    // 낮은 주소: 메모리의 시작 부분
    // 높은 주소: 메모리의 끝 부분
    // 대표적인 메모리 영역
    // 1. 코드 영역: 실행할 프로그램 코드가 저장되는 영역 (텍스트 영역)
    // CPU에서 저장된 명령어를 하나씩 읽어 실행합니다.
    // 프로그램 시작부터 종료까지 실행되는 동안 이 영역은 읽기 전용으로 유지됩니다.
    // 2. 데이터 영역: 프로그램에서 사용하는 전역 변수와 정적 변수가 저장되는 영역. 전역 변수(global variable)와 정적 변수(static variable)는 프로그램이 실행되는 동안 유지됩니다.
    // C#에서는 전역 변수 대신 정적 변수(static variable)를 사용합니다.
    // 정적 변수(static): 클래스나 구조체에 속하는 변수로, 프로그램 전체에서 하나의 인스턴스만 존재합니다. 프로그램 시작 시에 메모리에 할당되고, 프로그램 종료 시에 해제됩니다.
    // 3. 힙: 프로그래머가 직접 저장공간에 대한 할당과 해제를 관리하는 영역입니다. 값에 대한 등록도, 값에 대한 제거도 프로그래머가 설계합니다.
    // 특징) 참조 타입은 힙에 저장됩니다. (클래스, 배열, 델리게이트 등) C#의 힙 영역의 데이터는 GC(Garbage Collector)에 의해 관리됩니다. GC는 사용하지 않는 메모리를 자동으로 해제하여 메모리 누수를 방지합니다.
    // 저장 순서, 정렬에 대한 작업을 따로 신경 쓸 필요가 없습니다. 단 메모리가 크고, GC에 대해 자동으로 관리되기 때문에 많이 사용하면 성능 저하가 발생할 수 있습니다.
    // 접근 속도가 느린 편입니다. (참조 타입이므로 주소를 통해 접근해야 하기 때문입니다.)
    // 4. 스택: 함수 호출 시 지역 변수와 매개 변수가 저장되는 영역입니다. 함수가 호출될 때마다 새로운 스택 프레임이 생성되고, 함수가 종료되면 해당 프레임이 제거됩니다. (임시적 데이터 저장)
    // 특징) 값 타입은 스택에 저장됩니다. (구조체, 열거형 등) 스택은 LIFO(Last In First Out) 구조로, 가장 최근에 추가된 데이터가 가장 먼저 제거됩니다. 스택은 메모리 할당과 해제가 빠릅니다. 할당과 해제의 비용이 사실상 없음. (값 타입이므로 주소를 통해 접근하지 않고 값 그 자체를 사용합니다.)

    // 벡터의 특징
    // 1. 값 타입(value)으로 참조가 아닌 복사로 전달됩니다. (구조체 struct)
    // --> 계산이 빠르게 처리됩니다.
    // 2. 값을 복사할 경우 값 그 자체를 복사합니다.
    // 3. 벡터에 대한 계산 보조 함수가 제공됩니다. (magnitude, normalized, dot, cross 등)
    // 4. 벡터는 stack 메모리에 저장됩니다. (값 타입이므로)
    #endregion

    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        E = A + B;
        F = C + (Vector3)(Vector2)E;
        Debug.Log($"A: {A}, B: {B}, C: {C}, D: {D}, E: {E}, F: {F}");
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
